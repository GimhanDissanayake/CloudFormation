# Part 1 Equals to the AWS VPC Template
# This Template Create Nginx Webserver using ECS Fargate Mode

AWSTemplateFormatVersion: "2010-09-09"

###### Part 1: AWS VPC #######

Resources:
  # Create VPC
  vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.10.0.0/16
      Tags:
        - Key: Name
          Value: test_vpc

  # Create Public Subnet
  PubSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref vpc
      AvailabilityZone: us-east-1a
      CidrBlock: 10.10.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: test_pub_sn

  # Create Private Subnet
  PvtSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref vpc
      AvailabilityZone: us-east-1a
      CidrBlock: 10.10.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: test_pvt_sn

  # Create Internet Gateway
  IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: test_igw

  # Attach InternetGateway to VPC
  AttachIGW:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref IGW

  # Create Public Route Table
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: Public_RT

  # Add Routs to Public Route Table
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  # Association of Public Public Subnet to Public Route Table
  PubSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSubnet
      RouteTableId: !Ref PublicRouteTable

  # Generate Public Ip for NatGateway
  NatPublicIP:
    Type: "AWS::EC2::EIP"
    DependsOn: vpc
    Properties:
      Domain: vpc

  # Create NatGateway
  NatGateway:
    Type: "AWS::EC2::NatGateway"
    DependsOn: NatPublicIP
    Properties:
      AllocationId: !GetAtt NatPublicIP.AllocationId
      SubnetId: !Ref PubSubnet
      Tags:
        - Key: Name
          Value: Test_NatGateway

  # Create Private Route Table
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: Private_RT

  # Add Routes to Private Route Table
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Association of Private Subnet to Private Route Table
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PvtSubnet
      RouteTableId: !Ref PrivateRouteTable

####### Part 2: AWS ECS ########
# Just Take Public SubnetId from Upper Part

  # Create ECS Cluster
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: test-cluster

  # Create ECS LogGroup --> ECS task will log the application logs to this log group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: test-log-group

  # Create IAM Role for ECS Task
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: test-role
      # Trust Policy that is Associated with this Role
      # Define which entities can Assume the Role (Here ECS)
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      # Managed Policies need to be Attached
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # Create Security Group for Containers Created
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: test-SecurityGroup
      GroupDescription: Security group for NGINX container
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref vpc    

  #  Create Task TaskDefinition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: deployment-test-task # Group different Versions of Same Tasd Definition
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: deployment-test-container
          Image: nginx:1.17.7
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
      RequiresCompatibilities:
        - EC2
        - FARGATE

  # Defining the ECS Service
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: deployment-test-service
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PubSubnet
          SecurityGroups:
            - !GetAtt ContainerSecurityGroup.GroupId
